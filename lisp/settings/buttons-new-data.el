(progn (setf buttons-after-load-alist nil) (defbuttons programming-buttons nil nil (buttons-make ("\\" (cmd (my-ins "\\n"))) ("%" (cmd (my-ins "%d"))) ("3" (cmd (my-ins "({})"))) ("#" (cmd (my-ins "){}("))) ("2" (cmd (my-ins "\"{}\""))) ("@" (cmd (my-ins "'{}'"))) ("8" (cmd (my-ins "*"))) ("9" (cmd (my-ins "[0-9]+"))) ("e" (cmd (my-ins " = ") (inm))) ("4" (cmd (my-ins "[{}]"))) ("r" (cmd (my-ins "return "))) ("SPC" (cmd (my-ins ", ") (inm))) ("5" (cmd (my-ins "%s"))) ("=" (cmd (my-ins " == "))) ("+" (cmd (my-ins " != "))) ("]" (cmd (my-ins "[]"))) ("6" (cmd (my-ins "[^{}]"))) ((kbd "M-/") (quote my-comment-out)) ((kbd "M-?") (quote my-comment-out-and-duplicate)) ("R" (cmd (my-ins "***REMOVED***"))))) (global-set-key (kbd "M-/") (quote my-comment-out)) (defbuttons python-buttons python-mode-map programming-buttons (buttons-make ("e" (lambda nil (interactive) (insert (if (looking-back "^[ 	]*[a-zA-Z_.,]+ *") " = " "=")))) ("f" (cmd (my-ins "for {} in {}:") (nli) (my-ins "{}") (nli) (py-bck))) ("F" (cmd (my-ins "[ {} for {} in {} ]"))) ("w" (cmd (my-ins "while {}") (py-scn) (my-ins "{}") (nli) (py-bck))) ("T" (cmd (my-ins "try") (py-scn) (my-ins "{}") (nli) (py-bck) (my-ins "except") (py-scn))) ("z" (cmd (my-ins "if {}") (py-scn))) ("x" (cmd (my-ins "elif {}") (py-scn))) ("c" (cmd (my-ins "else") (py-scn))) ("v" (cmd (my-ins " if {} else {}"))) ("1" (cmd (my-ins "not "))) ("d" (cmd (my-ins "def {}(") (inm) (my-ins "{})") (py-scn))) ("a" (cmd (my-ins "lambda {}: ") (inm))) ("2" (cmd (my-ins "\"{}\""))) ("@" (cmd (my-ins "'{}'"))) ("q" (buttons-make ("x" (cmd (my-ins "xrange({})"))))) ("M" (cmd (my-ins "from {} import *") (cmt) (nli))) ("N" (cmd (my-ins "print ( {} )") (nli))) ("n" (cmd (my-ins "print ({})") (nli))) ("r" (cmd (my-ins "return {}") (nli) (py-bck))) ("L" (cmd (my-ins "class {}(object)") (py-scn))) ("l" (cmd (my-ins "len({})"))) ("'" (cmd (my-ins "\"\"\"{}\"\"\"") (nli))) ("W" (cmd (my-ins "with open({}, \"{}\") as fh:") (nli) (my-ins "{}") (nli))) ("SPC" (cmd (my-ins ", "))) ("I" (cmd (my-ins "def __init__( self )") (py-scn))) ("0" (cmd ((insert python-argparse-template)))) ("t" (cmd (my-ins "True"))) ("g" (cmd (my-ins "False"))) ("G" (cmd (my-ins "None"))) ("." (cmd (my-ins "import pdb;pdb.set_trace()") (nli))) ("_" (cmd (my-ins "if __name__ == \"__main__\":") (nli))) ("=" (cmd (my-ins " == "))) ("j" (cmd (my-ins " or ") (inm))) ("k" (cmd (my-ins " and ") (inm))) (">" (quote python-indent-shift-right)) ("<" (quote python-indent-shift-left)) ("s" (cmd (my-ins "self") (inm))) ("h" (cmd ((python-dir-on-expression)))) ("H" (cmd ((pdb-help-on-expression)))) ("i" (cmd (my-ins " in "))) ("[" (cmd (my-ins "{{}}"))) ("[" (cmd (my-ins "{}"))) ("]" (cmd (my-ins ".format({})"))) ("N" (cmd (my-ins "a=[{}]") (nli) (my-ins "print(getattr(Solution(), dir(Solution)[-1])(*a))"))) ("E" (cmd (my-ins "raise Exception({})"))) ("u" (buttons-make ("a" (cmd (my-ins "assert({})"))))))) (defbuttons pdb-buttons inferior-python-mode python-buttons (buttons-make ("r" (cmd (cmt "restart") ((pdb-restart)))) ("c" (cmd ((gud-cont nil)))) ("d" (cmd (cmt "n"))) ("x" (cmd ((gud-break nil)))) ("z" (cmd ((gud-remove nil)))) ("b" (cmd (cmt "b"))) ("escape" (cmd (cmt ""))) ("X" (cmd (cmt "exit"))))) (defun describe-function-at-point nil (interactive) (describe-function (function-called-at-point))) (defmacro ins-sexp (string &rest forms) (\` ((ins (\, (concat "(" string))) (\,@ forms) (ins ")")))) (defbuttons emacs-lisp-buttons (emacs-lisp-mode-map read-expression-map inferior-emacs-lisp-mode-map) programming-buttons (buttons-make ("d" (buttons-make ("v" (cmd (my-ins "(defvar {})") (nli))) ("f" (cmd (my-ins "(defun {} ({})") (nli) (my-ins "{})"))) ("m" (cmd (my-ins "(defmacro {} ({})") (nli) (my-ins "{})"))))) ("u" (buttons-make ("k" (cmd (my-ins "(defpackage ") (nli) (my-ins "(:use :cl){})"))) ("i" (cmd (my-ins "(:import-from #:{}"))) ("e" (cmd (my-ins "(:export #:"))) ("u" (cmd (my-ins "(:export #:"))))) ("w" (cmd (my-ins "(while {})") (nli))) ("a" (cmd (my-ins "(lambda ({}) {})"))) ("z" (cmd (my-ins "(if {})"))) ("x" (cmd (my-ins "(when {})"))) ("c" (cmd (my-ins "(unless {})"))) ("v" (cmd (my-ins "(progn {})"))) ("l" (buttons-make ("l" (cmd (my-ins "(let ({})") (nli) (my-ins "{})") (nli))) ("L" (cmd (my-ins "(let* ({})") (nli) (my-ins "{})") (nli))))) ("e" (cmd (my-ins "(setf {})"))) ("i" (cmd (my-ins "(interactive)"))) ("7" (buttons-make ("r" (cmd (my-ins "&rest "))) ("k" (cmd (my-ins "&key "))) ("b" (cmd (my-ins "&body "))) ("o" (cmd (my-ins "&optional "))))) ("g" (cmd (my-ins "nil"))) ("t" (buttons-make ("l" (buttons-make ("t" (cmd (my-ins "(list {})"))) ("l" (cmd (my-ins "(length {})"))))) ("1" (cmd (my-ins "(null {})"))) ("m" (buttons-make ("m" (cmd (my-ins "(mapcar {})") (nli))) ("x" (cmd (my-ins "(macroexpand '{})") (nli))))) ("g" (cmd (my-ins "({0}-sym (gensym \"{0}\"))") (nli))) ("e" (buttons-make ("e" (cmd (my-ins "(equal {})"))) ("q" (cmd (my-ins "(eq {})"))) ("=" (cmd (my-ins "(= {})"))) ("l" (cmd (my-ins "(eql {})"))))) ("f" (buttons-make ("r" (cmd (my-ins "(remove-if {})"))) ("R" (cmd (my-ins "(remove-if-not {})"))))) ("+" (cmd (my-ins "(1+ {})"))) ("s" (cmd (my-ins "(subseq {})"))) ("r" (cmd (my-ins "(return {})"))) ("v" (cmd (my-ins "(reverse {})"))) ("i" (cmd (my-ins "(insert {})"))) ("b" (cmd (my-ins "(boundp {})"))) ("n" (cmd (my-ins "~{~A~^{}~}"))) ("a" (cmd (my-ins "(assert "))) ("p" (cmd (my-ins "(push "))) ("c" (cmd (my-ins "(car "))) ("d" (cmd (my-ins "(cdr "))) ("z" (cmd (my-ins "(zerop "))))) ("n" (buttons-make ("n" (cmd (my-ins "(format \"{}\"{})"))) ("m" (cmd (my-ins "(message \"{}\"{})"))))) ("\\" (cmd (my-ins "\\\\({}\\\\)"))) ("s" (cmd ((call-interactively (quote insert-emacs-sym))))) ("j" (cmd (my-ins "(or {})"))) ("k" (cmd (my-ins "(and {})"))) ("1" (cmd (my-ins "(not {})"))) (":" (cmd (my-ins ": "))) ("'" (cmd (my-ins "'"))) ("h" (cmd ((describe-function-at-point)))) ("-" (cmd (my-ins "(-> {})"))) ("_" (cmd (my-ins "(->> {})"))) ("`" (cmd (my-ins "`{}'"))) ("p" (buttons-make ("l" (cmd (my-ins "(loop for {})") (nli))) ("i" (cmd (my-ins " in "))) ("t" (cmd (my-ins "with {} = "))) ("b" (cmd (my-ins "below "))) ("w" (cmd (my-ins "while "))) ("d" (cmd (my-ins "do "))) ("c" (cmd (my-ins "collect "))) ("a" (cmd (my-ins "append "))) ("f" (cmd (my-ins "finally "))) ("r" (cmd (my-ins "(return {})"))) ("3" (cmd (my-ins "#P\"{}\""))))))) (defbuttons cl-buttons (lisp-mode-map slime-mode-map) emacs-lisp-buttons (buttons-make ("d" (buttons-make ("i" (cmd (my-ins "(declare (ignore {}))"))) ("c" (cmd (my-ins "(defcommand {} ({}) ({})") (nli) (my-ins "{})"))) ("s" (cmd (my-ins "(defstruct {}") (nli) (my-ins "{})"))))) ("n" (buttons-make ("g" (cmd (my-ins "(format nil {})"))) ("t" (cmd (my-ins "(format t {})"))) ("f" (cmd (my-ins "(format fh {})"))) ("n" (cmd (my-ins "(format {})"))) ("[" (cmd (my-ins "~{~A~^{}~}"))))) ("#" (cmd (my-ins "#:"))) ("5" (cmd (my-ins "~A"))) ("%" (cmd (my-ins "~D"))) ("|" (cmd (my-ins "#\\Newline"))) ("\\" (cmd (my-ins "~%"))) (";" (cmd (my-ins ":"))) (":" (cmd (my-ins "::"))) ("h" (buttons-make ("d" (cmd ((move-beginning-of-line nil)) (my-ins "(describe '") ((move-end-of-line nil)) (my-ins ")") ((slime-repl-return)))) ("a" (cmd (my-ins "(apropos \"{}\")") (nli))) ("D" (cmd (my-ins "(declaim (optimize (debug 3) (speed 0)))"))))))) (defbuttons clojure-buttons (clojure-mode-map cider-repl-mode-map) cl-buttons (buttons-make ("5" (cmd (my-ins "%s"))) ("%" (cmd (my-ins "%d"))) ("\\" (cmd (my-ins "\\n"))) ("l" (cmd (my-ins "(let [{}]") (nli) (my-ins "{})") (nli))) ("d" (buttons-make ("f" (cmd (my-ins "(defn {} [{}]") (nli) (my-ins "{})") (nli))))) ("n" (cmd (my-ins "(printf \"{}\\n\"{})"))) (";" (cmd (my-ins ": "))) ("[" (cmd (my-ins "{{}}"))) ("c" (cmd (my-ins "(when-not  {})"))) ("h" (cmd (my-ins "(doc  {})"))) ("{" (cmd (my-ins "{:keys [{}]") (nli) (my-ins ":or {{}}}"))) ("a" (cmd (my-ins "(fn [{}]") (nli) (my-ins "{})"))) ("e" (cmd (my-ins "(def {})"))))) (defbuttons c-buttons (c-mode-map) programming-buttons (buttons-make ("f" (buttons-make ("f" (cmd (my-ins "for ( int {0} = 0; {0} < {}; {0}++ )") (cbd))) ("F" (cmd (my-ins "for ( int {0} = {}; {0} >= 0; {0}-- )") (cbd))))) ("w" (cmd (my-ins "while ({})") (cbd))) ("z" (cmd (my-ins "if ({})") (cbd))) ("x" (cmd (my-ins " else if ({})") (cbd))) ("c" (cmd (my-ins " else ") (cbd))) ("v" (cmd (my-ins "?{}: {}"))) ("V" (cmd ((kill-surrounding-sexp nil)) ((end-of-line)) (nli) (my-ins "(void)") ((yank-or-pop)) (my-ins ";") (inm))) ("1" (cmd (my-ins "!"))) ("n" (cmd (my-ins "printf( {} );"))) ("N" (cmd (my-ins "scanf( \"{}\"{} );"))) ("l" (cmd (my-ins "strlen( {} )"))) ("'" (cmd (my-ins "/*{}*/") (nli))) ("/" nil) ("t" (cmd (my-ins "true"))) ("g" (cmd (my-ins "false"))) ("G" (cmd (my-ins "NULL"))) ("j" (cmd (my-ins " || "))) ("k" (cmd (my-ins " && "))) (">" (cmd (py-shift right))) ("<" (cmd (py-shift left))) ("[" (cmd (my-ins "{{}}"))) (";" (cmd ((move-end-of-line nil)) (my-ins ";") (nli))) ("d" (buttons-make ("d" (cmd (my-ins " ( {} )") (cbd))) ("m" (cmd (my-ins "int main (int argc, char* argv[])") (cbd))))) ("i" (buttons-make ("u" (cmd (my-ins "unsigned "))) ("i" (cmd (my-ins "int "))) ("l" (cmd (my-ins "long "))) ("c" (cmd (my-ins "char "))) ("I" (cmd (my-ins "char* "))) ("v" (cmd (my-ins "void "))) ("t" (cmd (my-ins "const "))) ("b" (cmd (my-ins "bool "))))) ("s" (cmd (my-ins "sizeof({})"))) ("S" (cmd (my-ins "sizeof({0})/sizeof(*{0})"))) ("-" (cmd (my-ins "->"))) ("m" (cmd (my-ins "#include <stdlib.h>") (nli) (my-ins "#include <stdio.h>") (nli) (my-ins "#include <string.h>") (nli) (my-ins "#include <assert.h>") (nli) (my-ins "#define MAX(a, b) ((a)>(b)? (a):(b))") (nli) (my-ins "#define MIN(a, b) ((a)<(b)? (a):(b))") (nli) (my-ins "#define ABS(a) ((a)>=0? (a):-(a))") (nli))) ("b" (buttons-make ("c" (cmd (my-ins "continue;"))) ("b" (cmd (my-ins "break;"))))))) (defbuttons java-buttons java-mode-map c-buttons (buttons-make ("n" (cmd (my-ins "System.out.printf( \"{}\\n\"{} )") (scn))) ("l" (cmd (my-ins ".length"))) ("G" (cmd (my-ins "null"))) ("d" (buttons-make ("d" (cmd (my-ins " ( {} )") (cbd))) ("m" (cmd (my-ins "public static void main ( String[] argv)") (cbd))))) ("p" (buttons-make ("p" (cmd (my-ins "public "))) ("v" (cmd (my-ins "private "))) ("k" (cmd (my-ins "package "))) ("s" (cmd (my-ins "static "))))) ("s" (cmd (my-ins "this.") (inm))) ("S" (cmd ((java-new)))) ("F" (cmd (my-ins "for ({}: {})") (cbd))) ("L" (cmd (my-ins "class {}") (cbd))) ("i" (buttons-make ("i" (cmd (my-ins "int ") (inm))) ("I" (cmd (my-ins "Integer ") (inm))) ("s" (cmd (my-ins "String "))))) ("$" (cmd (my-ins "new {}[]{{}}"))) ("-" (cmd (my-ins " -> "))) ("m" (cmd (my-ins "import {};"))) ("m" (quote java-imports-add-import-dwim)) ("t" (cmd (my-ins "try ") (cbd) (my-ins "catch ({})") (cbd))))) (defun xml-toggle-line-comment nil (interactive) (save-excursion (beginning-of-line) (if (re-search-forward "^[[:space:]]*\\(<!--\\(.*\\)-->\\)[[:space:]]*" (line-end-position) t) (replace-match (match-string 2) nil t nil 1) (progn (re-search-forward "^[[:space:]]*\\(.*\\)[[:space:]]*" (line-end-position) t) (replace-match (format "<!--%s-->" (match-string 1)) nil t nil 1))))) (defbuttons xml-buttons (nxml-mode-map) nil (buttons-make ("/" (cmd (my-ins "<!--{}-->") (nli))) ((kbd "M-/") (quote xml-toggle-line-comment)) ("." (cmd (my-ins "</{0}>"))) ("e" (cmd (my-ins "="))) ("2" (cmd (my-ins "\"{}\""))) ("u" (cmd (my-ins "<u>{}</u>"))) ("," (cmd (my-ins "<{0}>{}</{0}>"))) ("n" (lambda (mix-expr) (interactive "senter mix expression: ") (insert (format (concat "<mix:message log-level=\"INFO\">" "%s is <mix:copy-of select=\"%s\"/>" "</mix:message>") mix-expr mix-expr)))))) (defbuttons html-buttons (html-mode-map) xml-buttons (buttons-make ("\\" (cmd (my-ins "<br/>"))) ("P" (cmd (my-ins "<p>{}</p>"))))) (defbuttons js-buttons (js-mode-map) c-buttons (buttons-make ("d" (cmd (my-ins "function {} ( {} )") (cbd))) ("a" (cmd (my-ins "function({}){{}}"))) ("." (cmd (my-ins "debugger;") (nli))) ("n" (cmd (my-ins "console.log( \"{}\"{} );"))) ("T" (cmd (my-ins "try") (cbd) (my-ins "catch(err)") (cbd))) ("f" (cmd (my-ins "for (var {0} = 0; {0}<{}; {0}++)") (cbd))) ("F" (cmd (my-ins "for (var {} in {})") (cbd))) ("l" (cmd (my-ins ".length"))) ("r" (cmd (my-ins "return {};"))) ("Z" (cmd (my-ins "if ( {} ){ {} }"))) ("v" (cmd (my-ins "var ") (inm))) ("[" (cmd (my-ins "{}"))) ("]" (cmd (my-ins ".format({})"))) ("{" (cmd (my-ins "{") (nli) (my-ins "{}") (nli) (my-ins "}") (idt))) (";" (cmd (my-ins ": "))) (":" (cmd (my-ins ": "))) ("_" (cmd (my-ins ",") (nli) (inm))) ("L" (cmd (my-ins "let { {} } = "))) ("G" (cmd (my-ins "null"))) ("N" (cmd (my-ins "logger.silly( \"") ((insert (format "%s-%d" (f-filename (buffer-file-name)) (random)))) (my-ins "\");"))) ("s" (cmd (my-ins "this."))) ("i" (cmd (my-ins "in"))) ("p" (cmd (my-ins ".prototype."))))) (defbuttons go-buttons go-mode-map c-buttons (buttons-make ("a" (cmd (my-ins "func({}){{}}"))) ("s" (cmd (my-ins ".(*{})"))) ("E" (cmd (my-ins " := "))) ("d" (cmd (my-ins "func {} ( {} ) {}") (cbd))) ("D" (cmd (my-ins "func Test{} ( t *testing.T )") (cbd))) ("]" (cmd (my-ins "[]"))) ("#" (cmd (my-ins "()"))) ("#" (cmd (my-ins "()"))) ("r" (cmd (my-ins "return ") (inm))) ("M" (cmd (my-ins "package main") (nli))) ("m" (cmd (my-ins "fmt.Sprintf( \"{}\\n\"{} )"))) ("n" (cmd (my-ins "fmt.Printf( \"{}\\n\"{} )"))) ("x" (cmd (my-ins "else if {}; {}") (cbd))) ("z" (cmd (my-ins "if {}; {}") (cbd))) (":" (cmd (my-ins ": "))) ("Z" (cmd (my-ins "if {}") (cbd))) ("Z" (cmd (my-ins "if ; DEBUG") (cbd))) ("F" (cmd (my-ins "for i := 0; i < {}; i++") (cbd))) ("W" (cmd (my-ins "switch ") (cbd))) ("w" (cmd (my-ins "case {}:") (nli))) (";" (cmd (my-ins ":") (nli))) ("T" (cmd (my-ins "type {} struct ") (cbd))) ("G" (cmd (my-ins "nil"))) ("6" (cmd (my-ins "%v"))) ("^" (cmd (my-ins "%#v"))) ("v" (cmd (my-ins "var "))) ("e" (cmd (my-ins " = "))) ("l" (cmd (my-ins "len( {} )"))) ("R" (cmd (my-ins "range ") (inm))) ("f11" (cmd ((go-run)))) ("+" (cmd (my-ins " != "))) ("f" (cmd (my-ins "for {} := range {}") (cbd))) ("P" (cmd (my-ins "%p"))) ("_" (cmd (my-ins "_, "))) ("{" (cmd (my-ins "&{}{{}}"))) ("O" (cmd (my-ins "verbose(func(){fmt.Printf(\"VERBOSE: {}\"{})})"))))) (quote (setq go-types (quote ("struct" "int" "bool" "string" "float")))) (defun insert-unique-line nil (interactive) (let* ((initial (concat "# " (uuid) "-")) (line (read-string "enter unique line: " initial)) (final (format "insert-text-block '%s' " line))) (insert final))) (defbuttons bash-buttons (sh-mode-map) programming-buttons (buttons-make ("1" (cmd (my-ins "! "))) ("V" (cmd (my-ins "\"${{}") ((upcase-last)) (my-ins "}\""))) ("v" (cmd (my-ins "${{}") ((upcase-last)) (my-ins "}"))) ("w" (cmd (my-ins "while {}; do") (nli) (my-ins "{}") (nli) (my-ins "done"))) ("e" (cmd ((upcase-last)) (my-ins "="))) ("E" (cmd ((upcase-last)) (my-ins "=${") ((insert (bash-identifier-current-line))) (my-ins "{}:-{}}") (nli))) ("$" (cmd (my-ins "$({})"))) ("j" (cmd (my-ins " || "))) ("k" (cmd (my-ins " && "))) ("S" (cmd (idt) (my-ins "case ${{}") ((upcase-last)) (my-ins "} in") (nli) (my-ins "{}") (nli) (my-ins "esac") (nli))) ("s" (cmd (idt) (my-ins ")") (nli) (my-ins "{}") (nli) (my-ins ";;") (nli))) ("o" (cmd (my-ins "${OPTARG}"))) ("4" (cmd (my-ins "[ {} ]"))) ("z" (cmd (my-ins "if {}; then") (nli) (my-ins "{}") (nli) (my-ins "fi") (idt) (nli))) ("x" (cmd (my-ins "elif {}; then") (nli) (my-ins "{}") (nli) (py-bck))) ("c" (cmd (my-ins "else {}; then") (nli) (my-ins "{}") (nli) (py-bck))) ("\\" (cmd (my-ins " \\") (nli))) ("|" (cmd (my-ins " | "))) ("n" (cmd (my-ins "echo "))) ("d" (cmd (my-ins "function {}") (cbd))) ("l" (cmd (my-ins " || exit ${LINENO}"))) ("L" (cmd (my-ins "echo \"{}\" && exit ${LINENO}"))) ("f" (cmd (my-ins "for {}") ((upcase-last)) (my-ins " in {}; do") (nli) (my-ins "{}") (nli) (my-ins "done"))) ("x" (quote shell-command-of-region)) ("H" (cmd (my-ins "${1} && shift") (nli))) ("g" (cmd (my-ins "true"))) ("G" (cmd (my-ins "false"))) ("u" (quote insert-unique-line)) ("C" (cmd (my-ins "cat <<EOF") (nli) (my-ins "{}EOF"))) ("0" (cmd ((insert sh-getopt-template)))))) (defbuttons tex-buttons tex-mode-map programming-buttons (buttons-make ("m" (cmd (my-ins "${}$"))) ("b" (cmd (my-ins "\\begin{{0}}{}\\end{{0}}"))) ("B" (cmd (my-ins "\\textbf{{}}"))) ("[" (cmd (my-ins "{{}}"))) ("i" (cmd (my-ins "\\in "))) ("I" (cmd (my-ins "\\item ") (idt) (my-ins "{}") (nli))) ("I" (cmd (my-ins "\\item ") (idt) (my-ins "{}") (nli))) ("l" (cmd (my-ins "\\begin{align*}") (nli) (my-ins "{}") (nli) (my-ins "\\end{align*}"))) ("L" (cmd (my-ins "\\begin{tabular}{lr}") (nli) (my-ins "{}\\end{tabular}"))) ("_" (cmd (my-ins ".${}$."))) ("x" (cmd (my-ins "(.x.)"))) ("q" (cmd (my-ins "\\begin{numedquestion}% q#{}") (nli) (my-ins "{}") (nli) (my-ins "\\end{numedquestion}") (idt) (nli))) ("P" (cmd (my-ins "\\begin{part}% ({})") (nli) (my-ins "{}") (nli) (my-ins "\\end{part}") (idt) (nli))) ("j" (cmd (my-ins " \\vee "))) ("k" (cmd (my-ins " \\wedge "))) ("j" (cmd (my-ins "\\cup "))) ("k" (cmd (my-ins "\\cap "))) ("1" (cmd (my-ins " \\sim "))) ("\\" (cmd (my-ins " \\\\") (nli) (inm))) ("6" (cmd (my-ins "^{{}}"))) ("K" (cmd (my-ins "{{} \\choose {}} ") (inm))) ("f" (cmd (my-ins "\\frac{{}}{{}}"))) ("(" (cmd (my-ins "P({})"))) ("8" (cmd (my-ins "P({})"))) (")" (cmd (my-ins " + "))) ("." (cmd (my-ins "\\cdot "))) ("|" (cmd (my-ins "P({}|{})"))) ("_" (cmd ((backward-char)) ((upcase-last)) (my-ins "_") ((forward-char)))) ("t" (cmd (my-ins "\\text{{}}"))) ("{" (cmd (my-ins "\\{{}\\}"))) ("-" (cmd (my-ins "(1-p)^") (inm))) ("_" (cmd (my-ins "_"))) ("p" (cmd (my-ins "^") (inm))) (";" (cmd (my-ins "P(\\{X={}\\})"))) ("=" (cmd (my-ins " + "))) ("E" (cmd (my-ins "E[{}]"))) ("]" (cmd (my-ins "^"))) ("+" (cmd (my-ins "+"))) ("v" (cmd (my-ins "\\begin{verbatim}{}\\end{verbatim}"))) ("7" (cmd (my-ins " & "))) (";" (cmd (my-ins "\\;"))) ("/" (quote my-comment-out)))) (defbuttons matlab-buttons (matlab-mode-map) python-buttons (buttons-make ("z" (cmd (my-ins "if {};") (nli) (my-ins "{}") (nli) (my-ins "end") (idt))) ("'" (cmd (my-ins "'"))) ("f" (cmd (my-ins "for {}=1{}:{}") (nli) (my-ins "{}end"))) ("j" (cmd (my-ins " ||  "))) ("k" (cmd (my-ins " &&  "))) ("2" (cmd (my-ins "'{}'"))) ("L" (cmd (my-ins "size({})"))) ("l" (cmd (my-ins "length({})"))) ("s" (cmd (my-ins "class({})"))) ("+" (cmd (my-ins "~="))) ("h" (cmd (my-ins "help ") (inm))) ("1" (cmd (my-ins "~"))) ("@" (cmd (my-ins "@(x)"))) ("a" (cmd (my-ins "arrayfun(@(x) {})"))) (">" (cmd (my-ins "keyboard;") (nli))) ("Q" (cmd (my-ins "dbquit") (cmt ""))) ("q" (cmd (my-ins "dbcont") (cmt ""))) ("N" (cmd (my-ins "sprintf('{}')"))) ("N" (cmd (my-ins "disp(sprintf('{}'{}))"))) ("[" (cmd (my-ins "{{}}"))) ("5" (cmd (my-ins "%f"))) (";" (cmd (my-ins ": "))) ("x" (cmd (my-ins "elseif "))))) (defbuttons r-buttons (ess-mode-map) programming-buttons (buttons-make ("h" (cmd (my-ins "help.search(") (inm) (my-ins "{})"))) ("e" (cmd (my-ins " <- "))) ("d" (cmd (my-ins " <- function({})") (cbd))) ("8" (cmd (my-ins "%*%"))) ("'" (cmd (my-ins "t({})"))) ("f" (cmd (my-ins "for({} in as.single({}:{}))") (cbd))) ("-" (cmd (my-ins "attr({}, \"{}\" )"))) ("N" (cmd (my-ins "print({})"))))) (defbuttons octave-buttons (octave-mode-map inferior-octave-mode-map) matlab-buttons (buttons-make ("d" (cmd (my-ins "function [{}] = {}({})") (nli) (my-ins "{}") (nli) (my-ins "endfunction"))) ("'" (cmd (my-ins "#{{}#}"))) ("2" (cmd (my-ins "\"{}\""))))) (defbuttons cpp-buttons (c++-mode-map) c-buttons (buttons-make ("f" (buttons-make ("F" (cmd (my-ins "for(auto& {}: {})") (cbd))))) ("i" (buttons-make ("s" (cmd (my-ins "string "))))) ("m" (cmd (my-ins "using namespace std;") (nli) (my-ins "#include <vector>") (nli) (my-ins "#include <unordered_map>") (nli) (my-ins "#include <iostream>") (nli) (my-ins "#define MAX(a, b) ((a)>(b)? (a):(b))") (nli) (my-ins "#define MIN(a, b) ((a)<(b)? (a):(b))") (nli) (my-ins "#define ABS(a) ((a)>=0? (a):-(a))") (nli))) ("N" (cmd (my-ins "cout << {} << endl") (scn))) ("," (cmd (my-ins " << "))) ("l" (cmd (my-ins ".size()"))) ("s" (cmd (my-ins "scanf( \"") (inm) (my-ins "{}\", {} )"))) ("s" (cmd (my-ins "scanf( \"%d\", &") (inm) (my-ins "{} );"))) ("S" (cmd (my-ins "int {0}; scanf( \"%d\", &{0} );") (nli))) ("M" (cmd (my-ins "#include <unordered_map>") (nli) (my-ins "#include <iostream>") (nli) (my-ins "#include <string>") (nli) (my-ins "#include <assert.h>") (nli) (my-ins "using namespace std;") (nli))))) (defbuttons yacc-buttons (yacc-mode-map) programming-buttons (buttons-make ("v" (cmd (my-ins "$") ((insertchar)))) ("D" (cmd (nli) (my-ins ":	"))) ("d" (cmd (nli) (my-ins "|	"))))) (defbuttons dot-buttons (dot-mode-map) programming-buttons (buttons-make ("l" (cmd (my-ins " [label=\"{}\"];"))) ("-" (cmd (my-ins " -> "))))) (defbuttons forum-post-buttons (forum-mode-map) programming-buttons (buttons-make ("," (cmd (my-ins "[code]{}[/code]"))))) (defun my-comment-out (arg &optional duplicate) (interactive "P") (let* ((mode-map-keymap-sym (intern (concat (symbol-name major-mode) "-map"))) (comment-cmd (when (boundp mode-map-keymap-sym) (lookup-key (symbol-value mode-map-keymap-sym) (kbd "s-/"))))) (when (and comment-cmd (not (eq comment-cmd (function my-comment-out)))) (call-interactively comment-cmd) (return))) (let ((start-end (if mark-active (cons (region-beginning) (region-end)) (cons (line-beginning-position) (save-excursion (when arg (next-logical-line (1- arg))) (point)))))) (let* ((start (save-excursion (goto-char (car start-end)) (line-beginning-position))) (end (save-excursion (goto-char (cdr start-end)) (line-end-position))) (comment-regexp (concat "\\`[[:space:]]*" (regexp-quote comment-start))) (text (buffer-substring-no-properties start end)) (is-commented (string-match comment-regexp text)) (comment-end "")) (if (zerop (length text)) (insert (concat comment-start (when comment-add comment-start) " ")) (funcall (if is-commented (quote uncomment-region) (quote comment-region)) start end nil)) (when duplicate (goto-char end) (end-of-line) (open-line 1) (next-line 1) (insert text))))) (defun my-comment-out-and-duplicate (arg) (interactive "P") (my-comment-out arg t)) (defbuttons org-buttons (org-mode-map) nil (buttons-make ("q" (cmd (my-ins "#+BEGIN_SRC {}") (nli) (my-ins "{}#+END_SRC") (nli))) ("`" (cmd (my-ins "~{}~"))) ("Q" (cmd (my-ins "#+begin_quote {}") (nli) (my-ins "{}#+end_quote") (nli))) ((kbd "<s-tab>") (quote org-indent-block)) ("return" (quote org-toggle-list-heading)) ("i" (lambda nil (interactive) (if org-inline-image-overlays (org-remove-inline-images) (org-display-inline-images)))) ("m" (cmd (my-ins "#+OPTIONS: ^:nil") (nli) (my-ins "#+OPTIONS: toc:nil") (nli) (my-ins "#+OPTIONS: html-postamble:nil") (nli) (my-ins "#+OPTIONS: num:nil") (nli) (my-ins "#+TITLE: {}") (nli))) ("R" (cmd (my-ins "***REMOVED***"))) ("w" (quote org-refile)))) (defbuttons message-buttons (message-mode-map) nil (buttons-make ("=" (cmd (my-ins " => "))) ("<" (cmd (re-sub "^[ 	]*>?[ 	]*" ""))))) (defbuttons ansi-term-buttons term-raw-map nil (buttons-make ("c" (lambda nil (interactive) "send ^C^C" (term-send-raw-string "") (term-send-raw-string ""))))) (defbuttons conf-buttons (conf-mode-map) programming-buttons (buttons-make ("e" (cmd (my-ins "="))))) (defbuttons magit-buttons (magit-mode-map) nil (buttons-make ("p" (quote magit-go-backward)) ("n" (quote magit-go-forward)))) (defun git-hunk-toggle-cmd (dest-indicator) (\` (lambda (a b) (\, (format "make region hunk lines start with '%s'" dest-indicator)) (interactive (if (region-active-p) (list (region-beginning) (region-end)) (list (line-beginning-position) (line-end-position (when (numberp current-prefix-arg) current-prefix-arg))))) (save-excursion (goto-char a) (while (re-search-forward "^[-+ ]" b t nil) (replace-match (\, dest-indicator) t)))))) (defbuttons diff-buttons (diff-mode-map) nil (buttons-make ("-" (git-hunk-toggle-cmd "-")) ("=" (git-hunk-toggle-cmd "+")) ("0" (git-hunk-toggle-cmd " ")))) (after-load-button nil))
